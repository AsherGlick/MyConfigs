################################################################################
############################## HELPFUL FUNCTIONS ###############################
################################################################################

#################################### EXTRACT ###################################
# The extract function extracts a file by finding the right program to extract #
# it with and running the function. Run this function by typing                #
# ~$ extract filetoextract.extention                                           #
################################################################################
extract () {
  if [ -f $1 ] ; then
case $1 in
          *.tar.bz2) tar xvjf $1 ;;
          *.tar.gz) tar xvzf $1 ;;
          *.bz2) bunzip2 $1 ;;
          *.rar) rar x $1 ;;
          *.gz) gunzip $1 ;;
          *.tar) tar xvf $1 ;;
          *.tbz2) tar xvjf $1 ;;
          *.tgz) tar xvzf $1 ;;
          *.zip) unzip $1 ;;
          *.Z) uncompress $1 ;;
          *.7z) 7z x $1 ;;
          *) echo "don't know how to extract '$1'..." ;;
      esac
else
echo "'$1' is not a valid file!"
  fi
}


newdir() {
  mkdir $1
  cd $1
}

# Removes an ssh key from the known hosts library
removekey() {
  if [ $# -eq 1 ]
  then
ssh-keygen -R $1
  else
echo "removekey removes an ssh key from the known hosts file"
    echo "Usage: removekey 'Key Name / IP Address'"
  fi
}


############################### CSV VIEW (CSView) ##############################
# This function displays a formatted CSV file to the user using less without   #
# word wrapping                                                                #
################################################################################
function csview {
  sed 's/,,/, ,/g;s/,,/, ,/g' $1 | column -s, -t | less -N -S
}

################################# PRESENTATION #################################
# This function enters the prompt into a presentation mode that changes the    #
# shown values from the actual values to temporary / imaginary settings that   #
# will not give away any potential security information                        #
################################################################################
presentation() {
  PROMPT="
[User@Computer] ~PATH "
}


################################ RANDOM PASSWORD ###############################
# This function generates a randome base64 16 character long password for you  #
# to use. The password should probaly be stored in a keyring as it is sorta    #
# hard to remember in my oppinion. This is mainly for use when creating        #
# config files that contain passwords that only computers use to log into      #
# other computers                                                              #
################################################################################
alias randpass="tr -dc A-Za-z0-9 </dev/urandom |  head -c 16"


################################ FORMAT SECONDS ################################
# This function takes in a number of seconds and formats into a string of      #
# days hours minutes and seconds only showing the maximum nonzero value and    #
# below.                                                                       #
# Arguments:                                                                   #
#   seconds - a number of seconds to convert                                   #
# Example:                                                                     #
#   $ format_seconds 2                                                         #
#   2                                                                          #
#   $ format_seconds 60                                                        #
#   1:00                                                                       #
#   $ format_seconds 9999999                                                   #
#   115:17:46:39                                                               #
################################################################################
function format_seconds () {
  num=$1
  sec=""
  min=""
  hour=""
  day=""

  # If there is a minute or more
  if [ $num -gt 59 ]
  then
    sec=$((num%60))
    if [ $sec -lt 10 ]
    then
      sec="0$sec"
    fi
    num=$((num/60))
    # If there is an hour or more
    if [ $num -gt 59 ]
    then
      min=$((num%60))
      if [ $min -lt 10 ]
      then
        min="0$min:"
      else
        min="$min:"
      fi
      num=$((num/60))
      # If there is a day or more
      if [ $num -gt 23 ]
      then
        hour=$((num%24))
        if [ $hour -lt 10 ]
        then
          hour="0$hour:"
        else
          hour="$hour:"
        fi
        # If there is a day or more
        if [ $num -ne 0 ]
        then
          day=$((num/24))
          day="$day:"
        fi
      else
        if [ $num -ne 0 ]
        then
          hour=$num
          if [ $hour < 10 ]
          then
            hour="0$hour"
          fi
          hour="$hour:"
        fi
      fi
    else
      if [ $num -ne 0 ]
      then
        min=$num
        min="$min:"
      fi
    fi
  else
    sec=$num
  fi
  echo "$day$hour$min$sec"
}
